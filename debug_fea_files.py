#!/usr/bin/env python3
"""
Debug script to examine the FEA input files generated by both uniform and topology approaches
"""
import numpy as np
from PIL import Image
import sys
import os

# Add the preprocessing directory to the path
sys.path.append('/workspace/topodiff/preprocessing')
sys.path.append('/workspace/topodiff')

# Load the summary data
dict_array = np.load('/workspace/dataset_1_diff/training_data_summary.npy', allow_pickle=True, encoding='latin1')

# Load sample 0 data
sample_data = dict_array[0]
BC_conf = sample_data['BC_conf']
load_position = sample_data['load_nodes']
load_x_value = sample_data['x_loads']
load_y_value = sample_data['y_loads']

# Load the topology image
topology_path = "/workspace/topodiff/data/dataset_2_reg/training_data/gt_topo_0.png"
with Image.open(topology_path) as img:
    img = img.convert('L')
    topology_array = np.array(img)

# Import the functions
from generate_displacement_fields_parallel import create_files_uniform, create_files_topology, topo_to_tab

# Create test directories
os.makedirs('/tmp/debug_uniform', exist_ok=True)
os.makedirs('/tmp/debug_topology', exist_ok=True)

# Generate uniform files
print("Creating uniform FEA files...")
create_files_uniform(BC_conf, load_position, load_x_value, load_y_value, '/tmp/debug_uniform')

# Generate topology files  
print("Creating topology FEA files...")
create_files_topology(topology_array, BC_conf, load_position, load_x_value, load_y_value, '/tmp/debug_topology')

# Compare the element files
print("\n=== ANALYZING ELEMENT FILES ===")

# Read uniform elements
with open('/tmp/debug_uniform/eles.txt', 'r') as f:
    uniform_elements = f.readlines()

# Read topology elements
with open('/tmp/debug_topology/eles.txt', 'r') as f:
    topology_elements = f.readlines()

print(f"Number of elements in uniform: {len(uniform_elements)}")
print(f"Number of elements in topology: {len(topology_elements)}")

# Check first few elements
print("\nFirst 5 uniform elements:")
for i in range(min(5, len(uniform_elements))):
    print(f"  {uniform_elements[i].strip()}")

print("\nFirst 5 topology elements:")
for i in range(min(5, len(topology_elements))):
    print(f"  {topology_elements[i].strip()}")

# Compare material files
print("\n=== ANALYZING MATERIAL FILES ===")

with open('/tmp/debug_uniform/mater.txt', 'r') as f:
    uniform_materials = f.read()

with open('/tmp/debug_topology/mater.txt', 'r') as f:
    topology_materials = f.read()

print(f"Uniform materials:\n{uniform_materials}")
print(f"Topology materials:\n{topology_materials}")

# Analyze the topology array and tab conversion
tab_topology = topo_to_tab(topology_array)
print(f"\n=== TOPOLOGY ANALYSIS ===")
print(f"Topology array shape: {topology_array.shape}")
print(f"Topology min/max: {topology_array.min()}/{topology_array.max()}")
print(f"Tab array shape: {tab_topology.shape}")
print(f"Tab solid elements (=1): {np.sum(tab_topology == 1)}")
print(f"Tab void elements (=0): {np.sum(tab_topology == 0)}")
print(f"First 10 tab values: {tab_topology[:10]}")

# Check if the element local coordinates differ between uniform and topology
print("\n=== LOCAL COORDINATE ANALYSIS ===")

# Extract local coordinates from element files
uniform_local_coords = []
topology_local_coords = []

for line in uniform_elements:
    parts = line.strip().split()
    if len(parts) >= 3:
        uniform_local_coords.append(int(parts[2]))

for line in topology_elements:
    parts = line.strip().split()
    if len(parts) >= 3:
        topology_local_coords.append(int(parts[2]))

print(f"Uniform local coordinates (first 10): {uniform_local_coords[:10]}")
print(f"Topology local coordinates (first 10): {topology_local_coords[:10]}")
print(f"All uniform local coords are 1: {all(x == 1 for x in uniform_local_coords)}")
print(f"Unique topology local coords: {set(topology_local_coords)}")

print("\nDebug analysis complete!")